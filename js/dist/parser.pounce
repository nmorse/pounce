
"a b c" [dup str-length 0 > [str-first {' ':space a:yeay b:ok c:C} case swap] if] [dup dip] 5 repeat

"a b c" [dup str-length 0 > [str-first {' ':space a:yeay b:ok c:C} case swap] if] [dup dip] [dup str-length 2 bubble-up] dip2 repeat

"a b c x y x z " [dup str-length [str-first swap] swap repeat] [str-to-stack] def





"abcax" [str-first {' ':space a:yeay b:ok c:C} case swap] [dup dip] 4 repeat


[dup str-length [str-last swap] swap repeat] [str-to-stack] def


{ word:parse-pounce
  args:[
    {ps:"string of pounce code" pl:[any]}
  ]
  description:'pounce bootstrap parser'
}
[ps get-^ split-last branch-on-char] define

branch-on-char
{ word:branch-on-char
  args:[
    char
  ]
  description:'pounce bootstrap parser'
}
[ps get-^ split-last branch-on-char] define
